// 思想:当前元素前面的序列是有序的，基于这个前提，从后往前去寻找当前元素在前面那个序列里的正确位置
// 单个元素看成一个只有一个元素的序列
let arr = [5, 3, 2, 4, 1, 0]


// [5]
// [empty, 5, 2, 4, 1] // 3
// [3, 5, 2, 4, 1]

// [3, 5]
// [empty, 3, 5, 4, 1] // 2
// [2, 3, 5, 4, 1]

// [2, 3, 5]
// [2, 3, empty, 5, 1] // 4
// [2, 3, 4, 5, 1]

// [2, 3, 4, 5]
// [empty, 2, 3, 4, 5] // 1
// [1, 2, 3, 4, 5]

// 1.当前元素前面的那个序列是有序的
// 2.正确位置指的是，前序列 < empty < 后序列    所有当前元素前面的数都不大于它，所有当前元素后面的数都不小于它
// 3.在有序序列里定位元素的位置时，是从后往前定位的，只要发现一个比当前元素大的值，就需要为当前元素腾位置


// 可以用二分法优化
function insertSort(arr) {
  const len = arr.length
  // temp 用来保存当前需要插入的元素
  let temp;
  for (let i = 1; i < len; i++) {
    let j = i
    temp = arr[i];
    while (j > 0 && arr[j - 1] > temp) {
      arr[j] = arr[ j - 1 ]
      j--
    }
    arr[j] = temp

  }
  return arr
  
}
console.log(insertSort(arr));