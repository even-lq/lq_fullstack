var rpxWindowWidth = 0,
  pxWindowWidth = 0,
  len = 0, // swiperItem的长度
  leftMargin = [], // tab边距数组
  diffX = 0; // 移动的差值

startPoint = null, // 鼠标按下的实例
  startX = 0, // 起始的swiperX坐标
  translateX = 0, // 最终的swiperX坐标

  multiple = 0, // tab移动距离相对于swiper的倍数
  distance = 0, // tab移动的最大距离
  halfDistance = 0, // tab移动距离的中位
  tabTranslateX = null; // 最终的tabX坐标
starTabX = 0; // 起始的tabX坐标
index = 0, // 移动的tab下标
  part = 0, // 移动的tab部分（分子）
  seconds = ''; // transition的秒数


function touchstart(e, ins) {
  leftMargin = ins.selectComponent('.tab').getDataset().leftmargin;

  var data = {
    windowWidth: e.target.dataset.width,
    len: e.target.dataset.len
  }
  pxWindowWidth = pxWindowWidth || data.windowWidth;
  rpxWindowWidth = rpxWindowWidth || pxWindowWidth * getRpx(pxWindowWidth);
  len = len || data.len

  distance = leftMargin[1] - leftMargin[0];
  halfDistance = (distance / 2);
  multiple = (leftMargin[1] - leftMargin[0]) / rpxWindowWidth;

  seconds = '';
  startPoint = e.changedTouches[0] || e.touches[0];
  startX = translateX;
  starTabX = tabTranslateX || leftMargin[0];

  ins.selectComponent('.mySwiperList').setStyle({
    transition: transition(seconds),
    transform: translateXZ(translateX)
  })
  ins.selectComponent('.tab-line').setStyle({
    transition: transition(seconds),
    transform: translateXZ(tabTranslateX)
  })

  return false
}
function touchmove(e, ins) {
  var nowPoint = e.changedTouches[0];

  if (startPoint) {
    diffX = (nowPoint.pageX - startPoint.pageX) * getRpx(pxWindowWidth)
  }

  translateX = startX + diffX

  var tabItem = ins.selectAllComponents('.tab-item')
  var move = - multiple * diffX // 移动的距离
  var lastX = -rpxWindowWidth * (len - 1) // translateX的边距

  if (translateX >= 0) {
    ins.selectComponent('.mySwiperList').setStyle({
      transform: translateXZ()
    })
  } else if (translateX < lastX) {
    ins.selectComponent('.mySwiperList').setStyle({
      transform: translateXZ(lastX)
    })
  } else {
    ins.selectComponent('.mySwiperList').setStyle({
      transform: translateXZ(translateX)
    })

    tabTranslateX = starTabX + move
    ins.selectComponent('.tab-line').setStyle({
      transform: translateXZ(tabTranslateX)
    })

    part = Math.abs(move) < halfDistance ? index * halfDistance : (diffX < 0 ? (index + 1) * halfDistance : (index - 1) * halfDistance)
    tabItem.forEach(function (item, index, arr) {
      index === getNumerator(part, distance) ? tabItem[index].addClass('active') : tabItem[index].removeClass('active')
    })
  }


  return false
}
function touchend(e, ins) {

  // 获取手指停止时的X
  translateX = Math.min(0, translateX) // 第一个不能往左滑
  translateX = Math.max(-rpxWindowWidth * (len - 1), translateX) // 最后一个不能往右滑
  var num = Math.round(translateX / rpxWindowWidth)
  seconds = '.3'
  translateX = num * rpxWindowWidth
  ins.selectComponent('.mySwiperList').setStyle({
    transition: transition(seconds),
    transform: translateXZ(translateX)
  })

  var maxLen = leftMargin.length - 1
  leftMargin[1] - tabTranslateX < tabTranslateX - leftMargin[0] ? (index < maxLen && ++index) : (index > 0 && --index)
  tabTranslateX = leftMargin[index]

  ins.selectComponent('.tab-line').setStyle({
    transition: transition(seconds),
    transform: translateXZ(tabTranslateX)
  })


  return false
}
function clickTab(e, ins) {
  index = Number(e.target.dataset.index)
  seconds = '.3'
  var leftMargin = ins.selectComponent('.tab').getDataset().leftmargin
  var tabItem = ins.selectAllComponents('.tab-item')

  pxWindowWidth = pxWindowWidth || ins.selectComponent('.tab').getDataset().width
  rpxWindowWidth = rpxWindowWidth || pxWindowWidth * getRpx(pxWindowWidth)

  if (!isNaN(index) && leftMargin.length !== 0) {
    tabTranslateX = leftMargin[index]
    ins.selectComponent('.tab-line').setStyle({
      transition: transition(seconds),
      transform: translateXZ(tabTranslateX)
    })

    tabItem.forEach(function (item, sub, arr) {
      sub === index ? tabItem[sub].addClass('active') : tabItem[sub].removeClass('active')
    })

    translateX = -index * rpxWindowWidth
    ins.selectComponent('.mySwiperList').setStyle({
      transition: transition(seconds),
      transform: translateXZ(translateX)
    })
  }
  return false

}
function getRpx(windowWidth) {
  return 750 / windowWidth
}
function translateXZ(x, z) {
  if (z === undefined) {
    z = 0
  }
  if (x === undefined) {
    x = 0
  }
  return 'translateX(' + x + 'rpx) translateZ(' + z + 'rpx)'
}
function transition(seconds) {
  return '' + seconds + 's'
}
function getNumerator(a, b) { // 获取分子 => 转变为下标
  var fenzi = parseInt(a.toFixed(2) * 100, 10); // 分子
  var fenmu = parseInt(b.toFixed(2) * 100, 10); // 分母
  var min = Math.min(fenzi, fenmu); // 较小的
  for (var i = min; i > 1; i--) {
    if (!(fenzi % i) && !(fenmu % i)) {
      fenzi = fenzi / i;
      fenmu = fenmu / i;
      min = Math.min(fenzi, fenmu);
    }
  }
  return fenzi;
}
module.exports = {
  touchstart: touchstart,
  touchmove: touchmove,
  touchend: touchend,
  clickTab: clickTab
}